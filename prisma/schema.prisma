generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  username  String     @unique
  email     String     @unique
  password  String
  photoUrl  String?
  posts     Post[]
  likes     Like[]
  // คนที่ติดตามผู้ใช้นี้ (target user ที่ถูก follow)
  followers Follower[] @relation("UserFollowers")
  // คนที่ผู้ใช้นี้ติดตาม (current user's following list)
  following Follower[] @relation("UserFollowing")
  comments  Comment[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Post {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
  comments  Comment[]

  @@index([userId])
}

model Follower {
  /// ID ของผู้ใช้ที่ติดตาม (ผู้ติดตาม)
  followerId  String
  /// ID ของผู้ใช้ที่ถูกติดตาม (target)
  followingId String

  /// ความสัมพันธ์ที่แสดงว่าผู้ใช้ที่เป็น "follower" หมายถึงผู้ที่ติดตามคนอื่น
  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  /// ความสัมพันธ์ที่แสดงว่าผู้ใช้ที่เป็น "following" หมายถึงผู้ที่ถูกติดตาม 
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
}

model Like {
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}
